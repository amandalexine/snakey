library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity game_logic is
	port(
		clk : in std_logic;
		
		valid : in std_logic;
		
		controller : in std_logic_vector(7 downto 0);
		
		apple_x_addy : out unsigned(5 downto 0);
		apple_y_addy : out unsigned(5 downto 0);
		
		w_addr : out std_logic_vector(12 - 1 downto 0);
		w_data : out std_logic_vector(3 - 1 downto 0);
		w_enable : out std_logic
	);
end game_logic;

architecture synth of game_logic is

	--moving snake
	signal counter : unsigned(4 downto 0) := 5d"0";
--	signal counter : unsigned(12 downto 0) := 13b"0";
	signal clkDiv : unsigned(1 downto 0) := "00";
			
		--start_x : out unsigned(9 downto 0);
		--start_y : out unsigned(9 downto 0);
		
	signal snake_y : unsigned(5 downto 0) := "010100";
	signal snake_x : unsigned(5 downto 0) := "011110";
		
	signal apple_x : unsigned(5 downto 0);
	signal apple_y : unsigned(5 downto 0);

	signal dir : std_logic_vector(1 downto 0) := "01";
	
	signal write_ena : std_logic;
	signal delete_self : std_logic;
	
	signal rand_x : unsigned(5 downto 0) := (others => '0');
	signal rand_y : unsigned(5 downto 0) := (others => '0');

begin
	
	process(clk) begin
		if rising_edge(clk) then
			counter <= counter + 5b"1";
			if ((controller(1) = '1') or (controller(0) = '1') or (controller(3) = '1') or (controller(2) = '1')) then
				delete_self <= '1';
			else
				delete_self <= '0';
			end if;
			
			if (counter = 30) then
				--if delete_self = '1' then
					--write_ena <= '1';
					--case dir is
						--when "00" => w_addr <= std_logic_vector(snake_y) & std_logic_vector(snake_x + 2);
						--when "01" => w_addr <= std_logic_vector(snake_y) & std_logic_vector(snake_x - 2);
						--when "10" => w_addr <= std_logic_vector(snake_y + 2) & std_logic_vector(snake_x);
						--when "11" => w_addr <= std_logic_vector(snake_y - 2) & std_logic_vector(snake_x);
						--when others => w_addr <= std_logic_vector(snake_y - 2) & std_logic_vector(snake_x);
					--end case;
					--w_data <= "000";
				--end if;
				write_ena <= '1';
				
				case dir is
					when "00" => snake_x <= (snake_x - 1) mod 40;
					when "01" => snake_x <= (snake_x + 1) mod 40;
					when "10" => snake_y <= (snake_y - 1) mod 30;
					when "11" => snake_y <= (snake_y + 1) mod 30;
					when others => snake_y <= snake_y;
				end case;
				
				w_addr <=  std_logic_vector(snake_y) & std_logic_vector(snake_x);
				w_data <= "011";
				
			elsif (counter = 31) then
				write_ena <= '1';	
				case dir is
					when "00" => w_addr <= std_logic_vector(snake_y) & std_logic_vector(snake_x + 2);
					when "01" => w_addr <= std_logic_vector(snake_y) & std_logic_vector(snake_x - 2);
					when "10" => w_addr <= std_logic_vector(snake_y + 2) & std_logic_vector(snake_x);
					when "11" => w_addr <= std_logic_vector(snake_y - 2) & std_logic_vector(snake_x);
					when others => w_addr <= std_logic_vector(snake_y - 2) & std_logic_vector(snake_x);
				end case;
				w_data <= "000";
			end if;
			dir <= "00" when controller(1) = '1' else --left
				   "01" when controller(0) = '1' else --right
				   "10" when controller(3) = '1' else --up
				   "11" when controller(2) = '1'; -- down	
					-- else "01";
		end if;
			apple_x <= rand_x + 16;
			apple_y <= rand_y + 16;
	end process;
	w_enable <= '1' when (write_ena = '1') else '0';
	
	apple_x_addy <= apple_x;
	apple_y_addy <= apple_y;
	
	--process(clk) begin
		--if rising_edge(clk) then
			--apple_x <= rand_x + 7;
			--apple_y <= rand_y + 7;
			
			--w_addr <= std_logic_vector(apple_y) & std_logic_vector(apple_x);
			--w_data <= "001";
		--end if;
	--end process;
			
end;



--case (dir) is
--moving up 
	--when "00" => snake_y <= snake_y + 1;
--moving down
	--when "01" => snake_y <= snake_y - 1;
--moving left
	--when "10" => snake_x <= snake_x - 1;
--moving right
	--when "11" => snake_x <= snake_x + 1;
--end case;
